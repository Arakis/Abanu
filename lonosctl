#!/bin/bash

cd $(dirname $0)
source env/default

rm -f os/*.lock

function configure {
	case $1 in
		all)
			configure patch apply
			;;

		external)
			git clone --recursive git@github.com:lonos-project/lonos-tools.git tools
			;;

		patch)
			patch ${@:2}
			;;

		mosa)
			external/MOSA-Project/Source/Compile.sh
			;;

		packages)
			cd external/MOSA-Project/Source;
			rm -rf packages
			mono ../Tools/nuget/nuget.exe restore Mosa.Tool.Mosactl.sln
			mono ../Tools/nuget/nuget.exe restore Mosa.sln
			cd ../../..
			mono external/MOSA-Project/Tools/nuget/nuget.exe restore src/Lonos.Build.sln
			mono external/MOSA-Project/Tools/nuget/nuget.exe restore src/Lonos.Kernel.sln
			;;

		*)
			echo $"Usage: lonosctl configure {all|patch|mosa|packages}"
			exit 1
	esac
}

function clean {
	case $1 in
		all)
			clean packages
			clean bin
			clean os
			clean logs
			;;

		bin)
			rm -rf bin
			rm -rf external/MOSA-Project/bin
			find src -type d -name "bin" -exec rm -rf {} \;
			;;

		logs)
			rm -rf logs
			;;

		obj)
			find . -type d -name "obj" -exec rm -rf {} \;
			;;
			
		os)
			rm -rf os
			;;

		packages)
			rm -rf external/MOSA-Project/Source/packages
			;;

		*)
			echo $"Usage: lonosctl clean {all|bin|os||logs|packages}"
			exit 1
	esac
}

function reset {
	case $1 in
		all)
			#reset git
			echo Skipping reset git. Call reset git manually.
			;;

		git)
			cd external/MOSA-Project
			git clean -xfd
			git reset --hard
			cd ../../
			git clean -xfd
			git reset --hard
			git submodule update --recursive
			;;

		*)
			echo $"Usage: lonosctl reset {all|git}"
			exit 1
	esac
}

function update {
	case $1 in
		all)
			update git
			;;

		git)
			cd external/MOSA-Project
			git pull
			cd ../../
			git pull
			git submodule update --recursive
			;;

		*)
			echo $"Usage: lonosctl reset {all|git}"
			exit 1
	esac
}

function patch {
	case $1 in
		apply)
			patches/apply
			;;

		revert)
			patches/apply --reverse
			;;

		*)
			echo $"Usage: lonosctl configure patch {apply|revert}"
			exit 1
	esac
}

function build {
	case $1 in
		all)
			build builder
			build assembly
			build native
			build app
			build app2
			build service.basic
			build app.shell
			build loader
			build kernel
			build image
			build disk
			;;

		builder)
			(cd src && msbuild Lonos.Build.sln /p:Configuration=Release)
			cp external/MOSA-Project/bin/Mosa.Plug.Korlib.dll bin
			cp external/MOSA-Project/bin/Mosa.Plug.Korlib.x86.dll bin
			cp external/MOSA-Project/bin/dnlib.* bin
			cp external/MOSA-Project/bin/Priority\ Queue.dll bin
			;;

		assembly)
			(cd src && msbuild Lonos.Kernel.sln /p:Configuration=Debug)
			;;

		native)
			src/Lonos.Native.x86/build
			;;

		app)
			(cd bin && mono -O=all ./Lonos.Build.exe --image=app)
			;;
		app2)
			(cd bin && mono -O=all ./Lonos.Build.exe --image=app2)
			;;

		app.shell)
			(cd bin && mono -O=all ./Lonos.Build.exe --image=app.shell)
			;;

		service.basic)
			(cd bin && mono -O=all ./Lonos.Build.exe --image=service.basic)
			;;

		loader)
			(cd bin && mono -O=all ./Lonos.Build.exe --image=loader)
			;;

		kernel)
			(cd bin && mono -O=all ./Lonos.Build.exe --image=kernel)
			;;

		loader,kernel)
			build loader
			build kernel
			;;

		image)
			_image
			;;

		disk)
			_disk
			;;

		*)
			echo $"Usage: lonosctl build {all|builder|assembly|native|app|app2|image|disk}"
			exit 1
	esac
}

function run {
	case $1 in
		bochs)
			_bochs ${@:2}
			;;

		qemu)
			_qemu ${@:2}
			;;

		*)
			echo $"Usage: lonosctl run {qemu|bochs}"
			exit 1
	esac
}

function debug {
	case $1 in
		qemu-kernel)
			gdb -x conf/gdb-qemu-kernel
			;;

		qemu-kernel-run)
			# Uncomment if not required!
			DEBUG_INTERRUPTS=,int
			#qemu_app=qemu-system-x86_64
			qemu_app=qemu-system-i386
			$qemu_app -kernel os/Lonos.OS.image.x86.bin -serial file:${LONOS_LOGDIR}/kernel.log -S -gdb stdio -d pcall,cpu_reset,guest_errors${DEBUG_INTERRUPTS} -D ${LONOS_LOGDIR}/emulator.log
			;;

		qemu-grub-hybrid)
			gdb -x conf/gdb-qemu-grub-hybrid
			;;

		qemu-grub-hybrid-run)
			# Uncomment if not required!
			DEBUG_INTERRUPTS=,int
			qemu_app=qemu-system-x86_64
			#qemu_app=qemu-system-i386

			bios="-L /usr/share/seabios"

			disk=${LONOS_OSDIR}/Lonos.Kernel.Core.x86-grub-hybrid.disk.img

			$qemu_app ${bios} -hda $disk -serial file:${LONOS_LOGDIR}/kernel.log -S -gdb stdio -d pcall,cpu_reset,guest_errors${DEBUG_INTERRUPTS} -D ${LONOS_LOGDIR}/emulator.log

			;;

		*)
			echo $"Usage: lonosctl run {qemu-kernel|qemu-grub-hybrid}"
			exit 1
	esac
}

function _image {
	(cd bin && mono -O=all ./Lonos.Build.exe --image=image)
}

function _disk {
	#image=$LONOS_OSDIR/lonos.kernel.image.bin
	#loader=$LONOS_PROJDIR/os/Lonos.Kernel.Loader.bin
	#kernel=$LONOS_PROJDIR/os/Lonos.Kernel.Core.bin
	#rm -f $image
	#cat $loader $kernel > $image
	#printf '\x31\xc0\xc3' | dd of=$image bs=1 seek=3 count=3 conv=notrunc
	
	create_efi_disk
	create_grub_hybrid_disk
}

function _bochs {
	case $1 in
		x86)
			arch=x86
			;;

		x86-grub-vbe)
			arch=x86-grub-vbe
			;;

		x64)
			arch=x64
			;;

		*)
			echo $"Usage: lonosctl run bochs {x86|x86-grub-vbe|x64|host}"
			exit 1
	esac

	bochsrc="${LONOS_PROJDIR}/conf/bochs-${arch}.bxrc"
	bochs -f ${bochsrc} -rc "${LONOS_PROJDIR}/conf/bochs.rc"
}

function _qemu {
	disk=${LONOS_OSDIR}/Lonos.OS.Core.x86.img

	case $1 in
		x86)
			arch=x86
			qemubin=qemu-system-i386
			cpu=qemu32,+sse4.1
			bios="-L /usr/share/seabios"
			;;

		x86-grub-vbe)
			arch=x86
			qemubin=qemu-system-i386
			cpu=qemu32,+sse4.1
			bios="-L /usr/share/seabios"

			disk=${LONOS_OSDIR}/Lonos.OS.Core.x86-grub-hybrid.disk.img
			;;

		x86-efi)
			arch=x86
			qemubin=qemu-system-i386
			cpu=qemu32,+sse4.1
			bios="-bios ${LONOS_PROJDIR}/tools/ovmf-ia32/OVMF-pure-efi.fd"

			disk=${LONOS_OSDIR}/Lonos.OS.Core.x86-efi.disk.img
			;;

		x64)
			arch=x64
			qemubin=qemu-system-x86_64
			cpu=qemu64
			bios="-L /usr/share/seabios"
			;;

		host)
			arch=x64
			qemubin=qemu-system-x86_64
			cpu=host
			kvmargs=-enable-kvm
			bios="-L /usr/share/seabios"
			;;

		*)
			echo $"Usage: lonosctl run qemu {x86|x86-efi|x86-grub-vbe|x64|host}"
			exit 1
	esac

	echo ${qemubin} ${bios} ${kvmargs} -cpu ${cpu} -hda $disk -serial file:${LONOS_PROJDIR}/logs/kernel.log -d pcall,cpu_reset,guest_errors -D ${LONOS_PROJDIR}/logs/emulator.log
	     ${qemubin} ${bios} ${kvmargs} -cpu ${cpu} -hda $disk -serial file:${LONOS_PROJDIR}/logs/kernel.log -d pcall,cpu_reset,guest_errors -D ${LONOS_PROJDIR}/logs/emulator.log
}

#function create_chroot {
	#wget ${alpine_mirror}/latest-stable/main/x86_64/apk-tools-static-${alpine_version}.apk
	#tar -xzf apk-tools-static-*.apk
	#wget https://raw.githubusercontent.com/alpinelinux/alpine-chroot-install/v0.9.0/alpine-chroot-install \
    #&& echo 'e5dfbbdc0c4b3363b99334510976c86bfa6cb251  alpine-chroot-install' | sha1sum -c \
    #|| exit 1
	#chmod +x alpine-chroot-install
#}

function create_efi_disk {
	disk=${LONOS_OSDIR}/Lonos.Kernel.Core.x86-efi.disk.img
	size=40880 #kb
	let "block=((size * 1024) / (512 * 16 * 16)) - 1"
	echo $block
	dd if=/dev/zero of=$disk bs=1k count=$size
	mformat -i $disk -h 16 -t 16 -s $block ::

	mcopy -i $disk -s $LONOS_TOOLSDIR/grub-efi-x86/efi ::/
	mcopy -i $disk -s $LONOS_TOOLSDIR/grub-efi-x86/boot ::/
	mcopy -i $disk -s $LONOS_TOOLSDIR/grub-efi-x86/NvVars ::/
	mcopy -i $disk -s $LONOS_TOOLSDIR/grub-efi-x86/.disk ::/
	mcopy -i $disk -s $LONOS_OSDIR/Lonos.OS.image.x86.bin ::/lonos.bin
}

function create_grub_hybrid_disk {
	disk=${LONOS_OSDIR}/Lonos.Kernel.Core.x86-grub-hybrid.disk.img
	isodir=$LONOS_PROJDIR/tmp/iso-grub-hybrid
	mkdir -p $isodir;
	cp $LONOS_OSDIR/lonos.os.image.x86.bin $isodir/lonos.bin
	mkdir -p $isodir/boot/grub
	cp $LONOS_TOOLSDIR/grub-efi-x86/boot/grub/grub.cfg $isodir/boot/grub
	grub-mkrescue -o $disk $isodir
}

function logs {
	case $1 in
		kernel)
			less +F "${LONOS_PROJDIR}/logs/kernel.log"
			;;

		emulator)
			less +F "${LONOS_PROJDIR}/logs/emulator.log"
			;;

		*)
			echo $"Usage: lonosctl logs {kernel|emulator}"
			exit 1
	esac
}

function _test {
	case $1 in
		cloud)
			
			;;

		*)
			echo $"Usage: lonosctl test {cloud}"
			exit 1
	esac
}

case $1 in
	configure)
		configure ${@:2}
		;;

	clean)
		clean ${@:2}
		;;

	update)
		update ${@:2}
		;;

	reset)
		reset ${@:2}
		;;

	build)
		build ${@:2}
		;;

	run)
		run ${@:2}
		;;

	logs)
		logs ${@:2}
		;;

	f1)
		create_efi_disk ${@:2}
		#create_chroot
		;;

	debug)
		debug ${@:2}
		;;

	test)
		_test ${@:2}
		;;

	*)
		echo $"Usage: lonosctl {configure|build|run|debug|clean|reset|logs|update}"
		exit 1
esac

